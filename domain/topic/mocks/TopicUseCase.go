// Code generated by mockery v1.0.0. DO NOT EDIT.

package topicmocks

import context "context"
import mock "github.com/stretchr/testify/mock"
import models "gitlab.com/99ridho/news-api/models"

// TopicUseCase is an autogenerated mock type for the TopicUseCase type
type TopicUseCase struct {
	mock.Mock
}

// DeleteTopic provides a mock function with given fields: ctx, _a1
func (_m *TopicUseCase) DeleteTopic(ctx context.Context, _a1 *models.Topic) (bool, error) {
	ret := _m.Called(ctx, _a1)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, *models.Topic) bool); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *models.Topic) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchTopics provides a mock function with given fields: ctx, limit, cursor
func (_m *TopicUseCase) FetchTopics(ctx context.Context, limit int64, cursor int64) ([]*models.Topic, error) {
	ret := _m.Called(ctx, limit, cursor)

	var r0 []*models.Topic
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) []*models.Topic); ok {
		r0 = rf(ctx, limit, cursor)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Topic)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64, int64) error); ok {
		r1 = rf(ctx, limit, cursor)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertTopic provides a mock function with given fields: ctx, _a1
func (_m *TopicUseCase) InsertTopic(ctx context.Context, _a1 *models.Topic) (*models.Topic, error) {
	ret := _m.Called(ctx, _a1)

	var r0 *models.Topic
	if rf, ok := ret.Get(0).(func(context.Context, *models.Topic) *models.Topic); ok {
		r0 = rf(ctx, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Topic)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *models.Topic) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateTopic provides a mock function with given fields: ctx, _a1
func (_m *TopicUseCase) UpdateTopic(ctx context.Context, _a1 *models.Topic) (*models.Topic, error) {
	ret := _m.Called(ctx, _a1)

	var r0 *models.Topic
	if rf, ok := ret.Get(0).(func(context.Context, *models.Topic) *models.Topic); ok {
		r0 = rf(ctx, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Topic)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *models.Topic) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
