// Code generated by mockery v1.0.0. DO NOT EDIT.

package topicmocks

import context "context"
import mock "github.com/stretchr/testify/mock"
import models "gitlab.com/99ridho/news-api/models"

// TopicRepository is an autogenerated mock type for the TopicRepository type
type TopicRepository struct {
	mock.Mock
}

// Delete provides a mock function with given fields: ctx, id
func (_m *TopicRepository) Delete(ctx context.Context, id int64) (bool, error) {
	ret := _m.Called(ctx, id)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, int64) bool); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Fetch provides a mock function with given fields: ctx, cursor, limit
func (_m *TopicRepository) Fetch(ctx context.Context, cursor int64, limit int64) ([]*models.Topic, error) {
	ret := _m.Called(ctx, cursor, limit)

	var r0 []*models.Topic
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) []*models.Topic); ok {
		r0 = rf(ctx, cursor, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Topic)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64, int64) error); ok {
		r1 = rf(ctx, cursor, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchById provides a mock function with given fields: ctx, id
func (_m *TopicRepository) FetchById(ctx context.Context, id int64) (*models.Topic, error) {
	ret := _m.Called(ctx, id)

	var r0 *models.Topic
	if rf, ok := ret.Get(0).(func(context.Context, int64) *models.Topic); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Topic)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchBySlug provides a mock function with given fields: ctx, slug
func (_m *TopicRepository) FetchBySlug(ctx context.Context, slug string) (*models.Topic, error) {
	ret := _m.Called(ctx, slug)

	var r0 *models.Topic
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.Topic); ok {
		r0 = rf(ctx, slug)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Topic)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, slug)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store provides a mock function with given fields: ctx, _a1
func (_m *TopicRepository) Store(ctx context.Context, _a1 *models.Topic) (int64, error) {
	ret := _m.Called(ctx, _a1)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context, *models.Topic) int64); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *models.Topic) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, _a1
func (_m *TopicRepository) Update(ctx context.Context, _a1 *models.Topic) (*models.Topic, error) {
	ret := _m.Called(ctx, _a1)

	var r0 *models.Topic
	if rf, ok := ret.Get(0).(func(context.Context, *models.Topic) *models.Topic); ok {
		r0 = rf(ctx, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Topic)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *models.Topic) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
