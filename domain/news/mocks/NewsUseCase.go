// Code generated by mockery v1.0.0. DO NOT EDIT.

package newsmocks

import context "context"
import mock "github.com/stretchr/testify/mock"
import models "gitlab.com/99ridho/news-api/models"

// NewsUseCase is an autogenerated mock type for the NewsUseCase type
type NewsUseCase struct {
	mock.Mock
}

// DeleteNews provides a mock function with given fields: ctx, _a1
func (_m *NewsUseCase) DeleteNews(ctx context.Context, _a1 *models.News) (int64, error) {
	ret := _m.Called(ctx, _a1)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context, *models.News) int64); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *models.News) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchNewsByParams provides a mock function with given fields: ctx, params
func (_m *NewsUseCase) FetchNewsByParams(ctx context.Context, params *models.FetchNewsParam) ([]*models.News, *models.Pagination, error) {
	ret := _m.Called(ctx, params)

	var r0 []*models.News
	if rf, ok := ret.Get(0).(func(context.Context, *models.FetchNewsParam) []*models.News); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.News)
		}
	}

	var r1 *models.Pagination
	if rf, ok := ret.Get(1).(func(context.Context, *models.FetchNewsParam) *models.Pagination); ok {
		r1 = rf(ctx, params)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*models.Pagination)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, *models.FetchNewsParam) error); ok {
		r2 = rf(ctx, params)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// InsertNews provides a mock function with given fields: ctx, _a1
func (_m *NewsUseCase) InsertNews(ctx context.Context, _a1 *models.News) (*models.News, error) {
	ret := _m.Called(ctx, _a1)

	var r0 *models.News
	if rf, ok := ret.Get(0).(func(context.Context, *models.News) *models.News); ok {
		r0 = rf(ctx, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.News)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *models.News) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateNews provides a mock function with given fields: ctx, _a1
func (_m *NewsUseCase) UpdateNews(ctx context.Context, _a1 *models.News) (*models.News, error) {
	ret := _m.Called(ctx, _a1)

	var r0 *models.News
	if rf, ok := ret.Get(0).(func(context.Context, *models.News) *models.News); ok {
		r0 = rf(ctx, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.News)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *models.News) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
